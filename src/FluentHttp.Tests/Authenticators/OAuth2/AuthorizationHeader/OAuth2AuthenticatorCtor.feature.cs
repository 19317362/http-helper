// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.4.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace FluentHttp.Tests.Authenticators.OAuth2.AuthorizationHeader
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class OAuth2AuthenticatorCtorFeature : Xunit.IUseFixture<OAuth2AuthenticatorCtorFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "OAuth2AuthenticatorCtor.feature"
#line hidden
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "OAuth2Authenticator ctor", "check if ctor assigns value correctly", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public virtual void SetFixture(OAuth2AuthenticatorCtorFeature.FixtureData fixtureData)
        {
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "OAuth2Authenticator ctor")]
        [Xunit.TraitAttribute("Description", "Create a new OAuth2AuthorizationRequestHeaderAuthenticator with value \"123\"")]
        public virtual void CreateANewOAuth2AuthorizationRequestHeaderAuthenticatorWithValue123()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new OAuth2AuthorizationRequestHeaderAuthenticator with value \"123\"", new string[] {
                        "important"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("a new FluentHttpRequest");
#line 7
 testRunner.When("I create OAuth2AuthorizationRequestHeaderAuthenticator with value as \"123\"");
#line 8
  testRunner.And("I get the OAuthToken");
#line 9
 testRunner.Then("there should be no exception thrown");
#line 10
  testRunner.And("OAuthToken should be 123");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "OAuth2Authenticator ctor")]
        [Xunit.TraitAttribute("Description", "Create a new OAuth2AuthorizationRequestHeaderAuthenticator with value as null")]
        public virtual void CreateANewOAuth2AuthorizationRequestHeaderAuthenticatorWithValueAsNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new OAuth2AuthorizationRequestHeaderAuthenticator with value as null", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("a new FluentHttpRequest");
#line 15
 testRunner.When("I create OAuth2AuthorizationRequestHeaderAuthenticator with value as null");
#line 16
 testRunner.Then("it should throw ArgumentOutOfRangeException");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "OAuth2Authenticator ctor")]
        [Xunit.TraitAttribute("Description", "Create a new OAuth2AuthorizationRequestHeaderAuthenticator with value as string.E" +
            "mpty")]
        public virtual void CreateANewOAuth2AuthorizationRequestHeaderAuthenticatorWithValueAsString_Empty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new OAuth2AuthorizationRequestHeaderAuthenticator with value as string.E" +
                    "mpty", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("a new FluentHttpRequest");
#line 20
 testRunner.When("I create OAuth2AuthorizationRequestHeaderAuthenticator with value as string.Empty" +
                    "");
#line 21
 testRunner.Then("it should throw ArgumentOutOfRangeException");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "OAuth2Authenticator ctor")]
        [Xunit.TraitAttribute("Description", "Create a new OAuth2AuthorizationRequestHeaderAuthenticator with value as empty st" +
            "ring \"\"")]
        public virtual void CreateANewOAuth2AuthorizationRequestHeaderAuthenticatorWithValueAsEmptyString()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new OAuth2AuthorizationRequestHeaderAuthenticator with value as empty st" +
                    "ring \"\"", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("a new FluentHttpRequest");
#line 25
 testRunner.When("I create OAuth2AuthorizationRequestHeaderAuthenticator with value as  empty strin" +
                    "g \"\"");
#line 26
 testRunner.Then("it should throw ArgumentOutOfRangeException");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "OAuth2Authenticator ctor")]
        [Xunit.TraitAttribute("Description", "Create a new OAuth2AuthorizationRequestHeaderAuthenticator with value as whitespa" +
            "ce")]
        public virtual void CreateANewOAuth2AuthorizationRequestHeaderAuthenticatorWithValueAsWhitespace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new OAuth2AuthorizationRequestHeaderAuthenticator with value as whitespa" +
                    "ce", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("a new FluentHttpRequest");
#line 30
 testRunner.When("I create OAuth2AuthorizationRequestHeaderAuthenticator with value as \" \"");
#line 31
 testRunner.Then("it should throw ArgumentOutOfRangeException");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                OAuth2AuthenticatorCtorFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                OAuth2AuthenticatorCtorFeature.FeatureTearDown();
            }
        }
    }
}
#endregion
